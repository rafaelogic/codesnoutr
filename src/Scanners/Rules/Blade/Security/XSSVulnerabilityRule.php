<?php

namespace Rafaelogic\CodeSnoutr\Scanners\Rules\Blade\Security;

use Rafaelogic\CodeSnoutr\Scanners\Rules\Blade\AbstractBladeRule;

class XSSVulnerabilityRule extends AbstractBladeRule
{
    protected array $xssVulnerableHelpers = [
        'html_entity_decode',
        'htmlspecialchars_decode',
        'strip_tags',
        'urldecode',
        'base64_decode',
        'unserialize',
    ];

    /**
     * Analyze Blade content for XSS vulnerabilities
     */
    protected function analyzeBladeContent(string $filePath, string $content): void
    {
        $lines = explode("\n", $content);
        
        foreach ($lines as $lineNumber => $line) {
            $lineNumber++; // 1-based
            
            $this->checkUnescapedOutput($filePath, $line, $lineNumber, $content);
            $this->checkDangerousFunctions($filePath, $line, $lineNumber);
            $this->checkHtmlVariableEscaping($filePath, $line, $lineNumber);
        }
    }

    /**
     * Check for unescaped output {!! !!}
     */
    protected function checkUnescapedOutput(string $filePath, string $line, int $lineNumber, string $content): void
    {
        if (preg_match('/\{!!\s*\$([^}]+)\s*!!\}/', $line, $matches)) {
            $variable = trim($matches[1]);
            
            // Allow certain safe variables (like rendered HTML from markdown, etc.)
            if (!$this->isSafeUnescapedVariable($variable, $content)) {
                $this->addIssue($this->createIssue(
                    $filePath,
                    $lineNumber,
                    'security',
                    'high',
                    'blade.xss_unescaped',
                    'Potential XSS Vulnerability',
                    'Unescaped output {!! !!} can lead to XSS attacks if user input is displayed.',
                    'Use escaped output {{ }} instead, or ensure the variable contains safe HTML.',
                    $this->getCodeContext($content, $lineNumber)
                ));
            }
        }
    }

    /**
     * Check for dangerous functions in Blade output
     */
    protected function checkDangerousFunctions(string $filePath, string $line, int $lineNumber): void
    {
        foreach ($this->xssVulnerableHelpers as $helper) {
            if (preg_match('/\{\{\s*' . preg_quote($helper) . '\s*\(/', $line)) {
                $this->addIssue($this->createIssue(
                    $filePath,
                    $lineNumber,
                    'security',
                    'medium',
                    'blade.dangerous_function',
                    'Dangerous Function in Template',
                    "Function {$helper}() can be dangerous when used with user input.",
                    'Validate and sanitize input before using this function, or move logic to controller.',
                    $this->getCodeContext('', $lineNumber)
                ));
            }
        }
    }

    /**
     * Check for HTML in variables that should be escaped
     */
    protected function checkHtmlVariableEscaping(string $filePath, string $line, int $lineNumber): void
    {
        if (preg_match('/\{\{\s*\$([^}]+)\s*\}\}/', $line, $matches)) {
            $variable = trim($matches[1]);
            
            if (preg_match('/html|content|description|message/i', $variable) && 
                !str_contains($line, '|escape') && !str_contains($line, '|e')) {
                $this->addIssue($this->createIssue(
                    $filePath,
                    $lineNumber,
                    'security',
                    'medium',
                    'blade.html_variable_escaping',
                    'HTML Variable May Need Escaping',
                    'Variables containing HTML content should be carefully handled to prevent XSS.',
                    'Consider using {!! !!} for safe HTML or add |escape filter for user content.',
                    $this->getCodeContext('', $lineNumber)
                ));
            }
        }
    }
}